import {
  Alert,
  BotConfig,
  ExchangeGateway,
  Notifier,
  Strategy,
  TrendProvider,
  SmartOpenAlert,
  SmartVolAddAlert,
  SmartCloseAlert,
  SmartBigCloseAlert,
  SmartBigAddAlert,
  SmartVolumeOpenAlert,
  BullishVolumeAlert,
  VolumeUpAlert,
  FixedShortSynchronizationAlert,
  LiveShortSynchronizationAlert,
} from './interfaces';
import { Logger } from '@nestjs/common';

export class BotEngine {
  private readonly logger = new Logger(BotEngine.name);

  constructor(
    public readonly cfg: BotConfig,
    public readonly exchange: ExchangeGateway,
    private readonly notifier: Notifier,
    private readonly trend: TrendProvider,
    public readonly strategy: Strategy,
  ) {}
  get name() {
    return this.cfg.name;
  }
  async notify(text: string) {
    await this.notifier.send(text);
  }
  baseUsd() {
    const baseUsd = this.cfg.smartvol?.baseUsd;
    if (!baseUsd || isNaN(baseUsd)) {
      this.logger.error(
        `‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: baseUsd –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º: ${baseUsd}`,
      );
      return undefined;
    }
    return baseUsd;
  }
  addUsd() {
    const baseUsd = this.baseUsd();
    if (!baseUsd) return undefined;

    const addFraction = this.cfg.smartvol?.addFraction;
    if (!addFraction || isNaN(addFraction)) {
      this.logger.error(
        `‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: addFraction –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º: ${addFraction}`,
      );
      return undefined;
    }

    return Math.round(baseUsd * addFraction);
  }
  mustCheckTrend() {
    return this.cfg.is_trended && this.cfg.timeframe_trend.length > 0;
  }
  async trendAgrees(symbol: string) {
    return this.trend.agreeAll(symbol, this.cfg.timeframe_trend);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç—Ä–µ–Ω–¥ —Å —É—á–µ—Ç–æ–º –∏–µ—Ä–∞—Ä—Ö–∏–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
   * –ì–ª–∞–≤–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–¥ –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏
   */
  async trendAgreesWithHierarchy(symbol: string) {
    return this.trend.agreeAllWithHierarchy(symbol, this.cfg.timeframe_trend);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –¥–æ–∫—É–ø–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é
   * –î–ª—è –¥–æ–∫—É–ø–∫–∏ –≤—Å–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å
   */
  async canAddPosition(symbol: string) {
    return this.trend.canAddPosition(
      symbol,
      this.cfg.timeframe_trend,
      this.cfg.direction,
    );
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–∫—Ä—ã–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é
   * –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≥–ª–∞–≤–Ω—ã–π —Ç—Ä–µ–Ω–¥ —Ä–∞–∑–≤–µ—Ä–Ω—É–ª—Å—è
   */
  async shouldClosePosition(symbol: string) {
    return this.trend.shouldClosePosition(
      symbol,
      this.cfg.timeframe_trend,
      this.cfg.direction,
    );
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≥–ª–∞–≤–Ω—ã–π (–≤—ã—Å—à–∏–π –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É) —Ç–∞–π–º—Ñ—Ä–µ–π–º
   */
  getMainTimeframe() {
    if (!this.cfg.timeframe_trend || this.cfg.timeframe_trend.length === 0)
      return null;

    const sorted = [...this.cfg.timeframe_trend].sort((a, b) => {
      const priorityA = this.getTimeframePriority(a);
      const priorityB = this.getTimeframePriority(b);
      return priorityB - priorityA;
    });

    return sorted[0];
  }

  /**
   * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
   */
  private getTimeframePriority(timeframe: string): number {
    const match = /^(\d+)([mhdw])$/i.exec(timeframe);
    if (!match) return 0;

    const value = parseInt(match[1]);
    const unit = match[2].toLowerCase();

    const multipliers = {
      m: 1, // –º–∏–Ω—É—Ç—ã
      h: 60, // —á–∞—Å—ã (60 –º–∏–Ω—É—Ç)
      d: 1440, // –¥–Ω–∏ (24 * 60 –º–∏–Ω—É—Ç)
      w: 10080, // –Ω–µ–¥–µ–ª–∏ (7 * 24 * 60 –º–∏–Ω—É—Ç)
    };

    return value * multipliers[unit];
  }
  async process(alert: Alert) {
    this.logger.log(
      `üîÑ –ë–æ—Ç ${this.name} –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–ª–µ—Ä—Ç: ${(alert as any).type} –¥–ª—è ${alert.symbol} @${alert.price}`,
    );

    if ((alert as any).type === 'SmartOpen') {
      this.logger.log(`üìà –û—Ç–∫—Ä—ã–≤–∞—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è ${alert.symbol}`);
      return this.strategy.onOpen(this, alert as SmartOpenAlert);
    }
    if ((alert as any).type === 'SmartVolumeOpen') {
      this.logger.log(`üìä –û—Ç–∫—Ä—ã–≤–∞—é –ø–æ–∑–∏—Ü–∏—é –ø–æ SmartVolume –¥–ª—è ${alert.symbol}`);
      return this.strategy.onSmartVolumeOpen(
        this,
        alert as SmartVolumeOpenAlert,
      );
    }
    if ((alert as any).type === 'SmartVolAdd') {
      this.logger.log(`‚ûï –î–æ–∫—É–ø–∞—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è ${alert.symbol}`);
      return this.strategy.onAdd(this, alert as SmartVolAddAlert);
    }
    if ((alert as any).type === 'SmartClose') {
      this.logger.log(`üõë –ó–∞–∫—Ä—ã–≤–∞—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è ${alert.symbol}`);
      return this.strategy.onClose(this, alert as SmartCloseAlert);
    }
    if ((alert as any).type === 'SmartBigClose') {
      this.logger.log(`üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è ${alert.symbol}`);
      return this.strategy.onBigClose(this, alert as SmartBigCloseAlert);
    }
    if ((alert as any).type === 'SmartBigAdd') {
      this.logger.log(`üöÄ –ë–æ–ª—å—à–∞—è –¥–æ–∫—É–ø–∫–∞ –¥–ª—è ${alert.symbol}`);
      return this.strategy.onBigAdd(this, alert as SmartBigAddAlert);
    }
    if ((alert as any).type === 'BullishVolume') {
      this.logger.log(`üêÇ Bullish Volume –¥–ª—è ${alert.symbol}`);
      return this.strategy.onBullishVolume(this, alert as BullishVolumeAlert);
    }
    if ((alert as any).type === 'VolumeUp') {
      this.logger.log(`üìä Volume Up –¥–ª—è ${alert.symbol}`);
      return this.strategy.onVolumeUp(this, alert as VolumeUpAlert);
    }
    if ((alert as any).type === 'FixedShortSynchronization') {
      this.logger.log(`üîí Fixed Short Synchronization –¥–ª—è ${alert.symbol}`);
      return this.strategy.onFixedShortSynchronization(
        this,
        alert as FixedShortSynchronizationAlert,
      );
    }
    if ((alert as any).type === 'LiveShortSynchronization') {
      this.logger.log(`üîí Live Short Synchronization –¥–ª—è ${alert.symbol}`);
      return this.strategy.onLiveShortSynchronization(
        this,
        alert as LiveShortSynchronizationAlert,
      );
    }

    this.logger.warn(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∞–ª–µ—Ä—Ç–∞: ${(alert as any).type}`);
  }
}

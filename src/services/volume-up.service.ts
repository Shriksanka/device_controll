import {
  Injectable,
  Logger,
  OnModuleInit,
  OnModuleDestroy,
} from '@nestjs/common';

export interface VolumeUpData {
  symbol: string;
  timeframe: string;
  volume: number;
  timestamp: Date;
}

export interface VolumeUpCloseState {
  symbol: string;
  botName: string;
  initialVolume: number;
  currentVolume: number;
  timestamp: Date;
  waitingForClose: boolean;
}

@Injectable()
export class VolumeUpService implements OnModuleInit, OnModuleDestroy {
  private readonly logger = new Logger(VolumeUpService.name);
  private volumeData = new Map<string, VolumeUpData>();
  private closeStates = new Map<string, VolumeUpCloseState>();
  private cleanupInterval: NodeJS.Timeout;

  onModuleInit() {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    this.cleanupInterval = setInterval(() => {
      this.cleanupExpiredData();
    }, 60000); // 60 —Å–µ–∫—É–Ω–¥
  }

  onModuleDestroy() {
    if (this.cleanupInterval) {
      clearInterval(this.cleanupInterval);
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —Å–∏–º–≤–æ–ª–∞ + —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
   */
  private getKey(symbol: string, timeframe: string): string {
    return `${symbol}_${timeframe}`;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è
   */
  private getCloseStateKey(symbol: string, botName: string): string {
    return `${symbol}_${botName}`;
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç Volume Up –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏–º–≤–æ–ª–∞ –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
   */
  saveVolumeUp(symbol: string, timeframe: string, volume: number): void {
    const key = this.getKey(symbol, timeframe);
    this.logger.log(
      `üíæ –°–æ—Ö—Ä–∞–Ω—è—é Volume Up –¥–ª—è ${symbol} (${timeframe}): ${volume}`,
    );

    this.volumeData.set(key, {
      symbol,
      timeframe,
      volume,
      timestamp: new Date(),
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    this.updateCloseState(symbol, volume);
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º SmartVolClose
   */
  initCloseState(symbol: string, botName: string, initialVolume: number): void {
    const key = this.getCloseStateKey(symbol, botName);
    this.logger.log(
      `üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–ª—è ${symbol} (${botName}) —Å VolumeUp: ${initialVolume}`,
    );

    this.closeStates.set(key, {
      symbol,
      botName,
      initialVolume,
      currentVolume: initialVolume,
      timestamp: new Date(),
      waitingForClose: true,
    });
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ VolumeUp
   */
  private updateCloseState(symbol: string, newVolume: number): void {
    for (const [key, state] of this.closeStates.entries()) {
      if (state.symbol === symbol && state.waitingForClose) {
        this.logger.log(
          `üìà –û–±–Ω–æ–≤–ª—è—é VolumeUp –¥–ª—è ${symbol} (${state.botName}): ${state.currentVolume} ‚Üí ${newVolume}`,
        );

        state.currentVolume = newVolume;
        state.timestamp = new Date(); // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ VolumeUp

        // –ï—Å–ª–∏ VolumeUp >= 19, –ø–æ–º–µ—á–∞–µ–º —á—Ç–æ –º–æ–∂–Ω–æ –∑–∞–∫—Ä—ã–≤–∞—Ç—å
        if (newVolume >= 19) {
          this.logger.log(
            `‚úÖ VolumeUp ${newVolume} >= 19 –¥–ª—è ${symbol} (${state.botName}) - –º–æ–∂–Ω–æ –∑–∞–∫—Ä—ã–≤–∞—Ç—å!`,
          );
        }
      }
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –∑–∞–∫—Ä—ã–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é
   */
  canClosePosition(symbol: string, botName: string): boolean {
    const key = this.getCloseStateKey(symbol, botName);
    const state = this.closeStates.get(key);

    if (!state || !state.waitingForClose) {
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞—Ä–µ–ª–∏ –ª–∏ –¥–∞–Ω–Ω—ã–µ (–±–æ–ª—å—à–µ 2 –º–∏–Ω—É—Ç)
    const now = new Date();
    const diffMs = now.getTime() - state.timestamp.getTime();
    const diffMinutes = diffMs / (1000 * 60);

    if (diffMinutes > 2) {
      this.logger.log(
        `‚è∞ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–ª—è ${symbol} (${botName}) —É—Å—Ç–∞—Ä–µ–ª–æ (${diffMinutes.toFixed(1)} –º–∏–Ω), –æ—á–∏—â–∞—é`,
      );
      this.closeStates.delete(key);
      return false;
    }

    // –ú–æ–∂–Ω–æ –∑–∞–∫—Ä—ã–≤–∞—Ç—å –µ—Å–ª–∏ VolumeUp >= 19
    return state.currentVolume >= 19;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è
   */
  getCloseState(symbol: string, botName: string): VolumeUpCloseState | null {
    const key = this.getCloseStateKey(symbol, botName);
    const state = this.closeStates.get(key);

    if (!state || !state.waitingForClose) {
      return null;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å
    const now = new Date();
    const diffMs = now.getTime() - state.timestamp.getTime();
    const diffMinutes = diffMs / (1000 * 60);

    if (diffMinutes > 2) {
      this.logger.log(
        `‚è∞ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–ª—è ${symbol} (${botName}) —É—Å—Ç–∞—Ä–µ–ª–æ (${diffMinutes.toFixed(1)} –º–∏–Ω), –æ—á–∏—â–∞—é`,
      );
      this.closeStates.delete(key);
      return null;
    }

    return state;
  }

  /**
   * –ü–æ–º–µ—á–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –∫–∞–∫ –∑–∞–∫—Ä—ã—Ç—É—é
   */
  markPositionClosed(symbol: string, botName: string): void {
    const key = this.getCloseStateKey(symbol, botName);
    const state = this.closeStates.get(key);

    if (state) {
      this.logger.log(
        `‚úÖ –ü–æ–∑–∏—Ü–∏—è ${symbol} (${botName}) –∑–∞–∫—Ä—ã—Ç–∞, –æ—á–∏—â–∞—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ`,
      );
      this.closeStates.delete(key);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç Volume Up –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏–º–≤–æ–ª–∞ –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
   */
  getVolumeUp(symbol: string, timeframe: string): VolumeUpData | null {
    const key = this.getKey(symbol, timeframe);
    const data = this.volumeData.get(key);
    if (!data) return null;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞—Ä–µ–ª–∏ –ª–∏ –¥–∞–Ω–Ω—ã–µ (–±–æ–ª—å—à–µ 2 –º–∏–Ω—É—Ç)
    const now = new Date();
    const diffMs = now.getTime() - data.timestamp.getTime();
    const diffMinutes = diffMs / (1000 * 60);

    if (diffMinutes > 2) {
      this.logger.log(
        `‚è∞ Volume Up –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${symbol} (${timeframe}) —É—Å—Ç–∞—Ä–µ–ª–∏ (${diffMinutes.toFixed(1)} –º–∏–Ω), –æ—á–∏—â–∞—é`,
      );
      this.volumeData.delete(key);
      return null;
    }

    return data;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç Volume Up –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏–º–≤–æ–ª–∞ –ø–æ –≤—Å–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
   */
  getVolumeUpBySymbol(symbol: string): VolumeUpData[] {
    const now = new Date();
    const symbolData: VolumeUpData[] = [];

    for (const [key, data] of this.volumeData.entries()) {
      if (data.symbol === symbol) {
        const diffMs = now.getTime() - data.timestamp.getTime();
        const diffMinutes = diffMs / (1000 * 60);

        if (diffMinutes <= 2) {
          symbolData.push(data);
        } else {
          this.logger.log(
            `‚è∞ –û—á–∏—â–∞—é —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ Volume Up –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${symbol} (${data.timeframe}) (${diffMinutes.toFixed(1)} –º–∏–Ω)`,
          );
          this.volumeData.delete(key);
        }
      }
    }

    return symbolData;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ Volume Up –¥–∞–Ω–Ω—ã–µ
   */
  getAllActiveVolumeUp(): VolumeUpData[] {
    const now = new Date();
    const activeData: VolumeUpData[] = [];

    for (const [key, data] of this.volumeData.entries()) {
      const diffMs = now.getTime() - data.timestamp.getTime();
      const diffMinutes = diffMs / (1000 * 60);

      if (diffMinutes <= 2) {
        activeData.push(data);
      } else {
        this.logger.log(
          `‚è∞ –û—á–∏—â–∞—é —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ Volume Up –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${data.symbol} (${data.timeframe}) (${diffMinutes.toFixed(1)} –º–∏–Ω)`,
        );
        this.volumeData.delete(key);
      }
    }

    return activeData;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç Volume Up –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º—É
   */
  getVolumeUpByTimeframe(timeframe: string): VolumeUpData[] {
    const now = new Date();
    const timeframeData: VolumeUpData[] = [];

    for (const [key, data] of this.volumeData.entries()) {
      if (data.timeframe === timeframe) {
        const diffMs = now.getTime() - data.timestamp.getTime();
        const diffMinutes = diffMs / (1000 * 60);

        if (diffMinutes <= 2) {
          timeframeData.push(data);
        } else {
          this.logger.log(
            `‚è∞ –û—á–∏—â–∞—é —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ Volume Up –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${data.symbol} (${timeframe}) (${diffMinutes.toFixed(1)} –º–∏–Ω)`,
          );
          this.volumeData.delete(key);
        }
      }
    }

    return timeframeData;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è
   */
  getAllCloseStates(): VolumeUpCloseState[] {
    const now = new Date();
    const activeStates: VolumeUpCloseState[] = [];

    for (const [key, state] of this.closeStates.entries()) {
      const diffMs = now.getTime() - state.timestamp.getTime();
      const diffMinutes = diffMs / (1000 * 60);

      if (diffMinutes <= 2) {
        activeStates.push(state);
      } else {
        this.logger.log(
          `‚è∞ –û—á–∏—â–∞—é —É—Å—Ç–∞—Ä–µ–≤—à–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–ª—è ${state.symbol} (${state.botName}) (${diffMinutes.toFixed(1)} –º–∏–Ω)`,
        );
        this.closeStates.delete(key);
      }
    }

    return activeStates;
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –≤—Å–µ Volume Up –¥–∞–Ω–Ω—ã–µ
   */
  clearAll(): void {
    this.logger.log('üßπ –û—á–∏—â–∞—é –≤—Å–µ Volume Up –¥–∞–Ω–Ω—ã–µ');
    this.volumeData.clear();
    this.closeStates.clear();
  }

  /**
   * –û—á–∏—â–∞–µ—Ç Volume Up –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
   */
  clearBySymbol(symbol: string): void {
    this.logger.log(`üßπ –û—á–∏—â–∞—é Volume Up –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${symbol}`);
    for (const [key, data] of this.volumeData.entries()) {
      if (data.symbol === symbol) {
        this.volumeData.delete(key);
      }
    }

    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
    for (const [key, state] of this.closeStates.entries()) {
      if (state.symbol === symbol) {
        this.closeStates.delete(key);
      }
    }
  }

  /**
   * –û—á–∏—â–∞–µ—Ç Volume Up –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
   */
  clearByTimeframe(timeframe: string): void {
    this.logger.log(`üßπ –û—á–∏—â–∞—é Volume Up –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ ${timeframe}`);
    for (const [key, data] of this.volumeData.entries()) {
      if (data.timeframe === timeframe) {
        this.volumeData.delete(key);
      }
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ Volume Up –¥–∞–Ω–Ω—ã–º
   */
  getStats(): {
    total: number;
    active: number;
    symbols: number;
    timeframes: number;
    closeStates: number;
  } {
    const active = this.getAllActiveVolumeUp();
    const symbols = new Set(active.map((d) => d.symbol)).size;
    const timeframes = new Set(active.map((d) => d.timeframe)).size;
    const closeStates = this.getAllCloseStates().length;

    return {
      total: this.volumeData.size,
      active: active.length,
      symbols,
      timeframes,
      closeStates,
    };
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  private cleanupExpiredData(): void {
    this.logger.debug('üßπ –ó–∞–ø—É—Å–∫–∞—é –æ—á–∏—Å—Ç–∫—É —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö Volume Up –¥–∞–Ω–Ω—ã—Ö');
    this.getAllActiveVolumeUp(); // –≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—Å—Ç–∏—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ
    this.getAllCloseStates(); // –≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—Å—Ç–∏—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  }
}

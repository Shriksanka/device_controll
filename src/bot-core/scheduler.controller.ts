import { Controller, Post, Param, Logger } from '@nestjs/common';
import { BotsScheduler } from './scheduler.service';

@Controller('/scheduler')
export class SchedulerController {
  private readonly logger = new Logger(SchedulerController.name);

  constructor(private readonly scheduler: BotsScheduler) {}

  @Post('/test-trend-report/:botName')
  async testTrendReport(@Param('botName') botName: string) {
    this.logger.log(`üß™ –¢–µ—Å—Ç–∏—Ä—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç—á–µ—Ç–∞ –æ —Ç—Ä–µ–Ω–¥–µ –¥–ª—è –±–æ—Ç–∞ ${botName}`);

    try {
      // –ù–∞—Ö–æ–¥–∏–º –±–æ—Ç–∞ –ø–æ –∏–º–µ–Ω–∏
      const bots = this.scheduler.registry.all();
      const bot = bots.find((b: any) => b.name === botName);

      if (!bot) {
        return {
          ok: false,
          error: `–ë–æ—Ç ${botName} –Ω–µ –Ω–∞–π–¥–µ–Ω`,
          availableBots: bots.map((b: any) => b.name),
        };
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
      await this.scheduler.sendTrendReport(bot);

      return {
        ok: true,
        message: `–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ —Ç—Ä–µ–Ω–¥–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è ${botName}`,
        timestamp: new Date().toISOString(),
      };
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: ${error.message}`);
      return {
        ok: false,
        error: error.message,
        timestamp: new Date().toISOString(),
      };
    }
  }

  @Post('/send-all-trend-reports')
  async sendAllTrendReports() {
    this.logger.log(`üìä –û—Ç–ø—Ä–∞–≤–ª—è—é –æ—Ç—á–µ—Ç—ã –æ —Ç—Ä–µ–Ω–¥–µ –¥–ª—è –≤—Å–µ—Ö –±–æ—Ç–æ–≤`);

    try {
      const bots = this.scheduler.registry.all();
      const results: { bot: string; status: string; error?: string }[] = [];

      for (const bot of bots) {
        try {
          await this.scheduler.sendTrendReport(bot);
          results.push({ bot: bot.name, status: 'success' });
        } catch (error: any) {
          results.push({
            bot: bot.name,
            status: 'error',
            error: error.message,
          });
        }
      }

      return {
        ok: true,
        message: '–û—Ç—á–µ—Ç—ã –æ —Ç—Ä–µ–Ω–¥–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã',
        results,
        timestamp: new Date().toISOString(),
      };
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤: ${error.message}`);
      return {
        ok: false,
        error: error.message,
        timestamp: new Date().toISOString(),
      };
    }
  }
}

import { Injectable, Logger } from '@nestjs/common';
import { BotsRegistry } from './bots.registry';
import { parseIntervalMs } from './utils';

@Injectable()
export class BotsScheduler {
  private readonly log = new Logger(BotsScheduler.name);
  private timers: NodeJS.Timeout[] = [];

  constructor(public readonly registry: BotsRegistry) {}

  start() {
    for (const bot of this.registry.all()) {
      const c = bot.cfg;
      if (!c.scheduled_notification || !c.scheduled_time) continue;
      const ms = parseIntervalMs(c.scheduled_time);
      this.log.log(`Schedule ${bot.name}: every ${c.scheduled_time}`);
      const t = setInterval(async () => {
        await this.sendTrendReport(bot);
      }, ms);
      this.timers.push(t);
    }
  }

  public async sendTrendReport(bot: any) {
    try {
      const c = bot.cfg;
      this.log.log(`üìä –û—Ç–ø—Ä–∞–≤–ª—è—é –æ—Ç—á–µ—Ç –æ —Ç—Ä–µ–Ω–¥–µ –¥–ª—è ${bot.name}`);

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–Ω–¥ –ø–æ –≤—Å–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º –±–æ—Ç–∞
      const trendResults = await Promise.all(
        c.timeframe_trend.map(async (tf) => {
          // –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–Ω–¥ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
          const trend = await bot.trend.getCurrent(
            bot.cfg.symbol_filter?.[0] || 'BTCUSDT',
            tf,
          );
          return { timeframe: tf, trend };
        }),
      );

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç—Ä–µ–Ω–¥–µ
      let trendMessage = `üìä ${bot.name} - –û—Ç—á–µ—Ç –æ —Ç—Ä–µ–Ω–¥–µ\n`;
      trendMessage += `‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}\n`;
      trendMessage += `üéØ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞: ${c.direction.toUpperCase()}\n`;
      trendMessage += `üìà –¢–∞–π–º—Ñ—Ä–µ–π–º—ã: ${c.timeframe_trend.join(', ')}\n`;
      if (c.symbol_filter && c.symbol_filter.length > 0) {
        trendMessage += `üéØ –°–∏–º–≤–æ–ª—ã: ${c.symbol_filter.join(', ')}\n`;
      }
      trendMessage += `\n`;

      trendResults.forEach(({ timeframe, trend }) => {
        const emoji =
          trend === c.direction ? '‚úÖ' : trend === 'neutral' ? '‚ö™' : '‚ùå';
        trendMessage += `${emoji} ${timeframe}: ${trend.toUpperCase()}\n`;
      });

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å —Ç—Ä–µ–Ω–¥–∞
      const allTrends = trendResults.map((r) => r.trend);
      const trendStatus = this.getTrendStatus(allTrends, c.direction);
      trendMessage += `\nüìà –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: ${trendStatus}`;

      // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      if (trendStatus.includes('–°–ò–õ–¨–ù–´–ô')) {
        trendMessage += `\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –¢—Ä–µ–Ω–¥ —Å–∏–ª—å–Ω—ã–π, –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏`;
      } else if (trendStatus.includes('–ü–†–û–¢–ò–í–û–ü–û–õ–û–ñ–ù–´–ô')) {
        trendMessage += `\n‚ö†Ô∏è –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –¢—Ä–µ–Ω–¥ —Ä–∞–∑–≤–µ—Ä–Ω—É–ª—Å—è, –∑–∞–∫—Ä—ã–≤–∞–π—Ç–µ –ø–æ–∑–∏—Ü–∏–∏`;
      } else if (trendStatus.includes('–°–ú–ï–®–ê–ù–ù–´–ô')) {
        trendMessage += `\nüîÑ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –¢—Ä–µ–Ω–¥ —Å–º–µ—à–∞–Ω–Ω—ã–π, –±—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã`;
      } else {
        trendMessage += `\n‚è∏ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –¢—Ä–µ–Ω–¥ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π, –∂–¥–∏—Ç–µ —á–µ—Ç–∫–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞`;
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      await bot.notify(trendMessage);
      this.log.log(`‚úÖ –û—Ç—á–µ—Ç –æ —Ç—Ä–µ–Ω–¥–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è ${bot.name}`);
    } catch (error) {
      this.log.error(
        `‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –æ —Ç—Ä–µ–Ω–¥–µ –¥–ª—è ${bot.name}: ${error.message}`,
      );
    }
  }

  private getTrendStatus(trends: string[], botDirection: string): string {
    const longCount = trends.filter((t) => t === 'long').length;
    const shortCount = trends.filter((t) => t === 'short').length;
    const neutralCount = trends.filter((t) => t === 'neutral').length;

    if (trends.every((t) => t === botDirection)) {
      return `üü¢ –°–ò–õ–¨–ù–´–ô ${botDirection.toUpperCase()} - –≤—Å–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç`;
    } else if (trends.some((t) => t === botDirection)) {
      return `üü° –°–ú–ï–®–ê–ù–ù–´–ô ${botDirection.toUpperCase()} - —á–∞—Å—Ç–∏—á–Ω–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç`;
    } else if (trends.every((t) => t === 'neutral')) {
      return `‚ö™ –ù–ï–ô–¢–†–ê–õ–¨–ù–´–ô - –Ω–µ—Ç —á–µ—Ç–∫–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è`;
    } else {
      const oppositeDirection = botDirection === 'long' ? 'short' : 'long';
      return `üî¥ –ü–†–û–¢–ò–í–û–ü–û–õ–û–ñ–ù–´–ô ${oppositeDirection.toUpperCase()} - —Ç—Ä–µ–Ω–¥ —Ä–∞–∑–≤–µ—Ä–Ω—É–ª—Å—è`;
    }
  }
}
